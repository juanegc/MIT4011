#include <memory.h>
#include "librerias.h"
#include <stdlib.h>
typedef struct tCell{
int payload;
void *next;
} Cell;
void printList(Cell *root){
    if(root==NULL)
    {
    return;
    }
    while(root!=NULL)
    {
    printf("%d ",root->payload);
    root=root->next;
    }
    printf("\n");
}
Cell pop (Cell root) {
    Cell *cursor;
    cursor=&root;
    while (((Cell*)cursor->next)->next != NULL){
        printf("%d", cursor->payload);
        cursor = (Cell*)cursor -> next;
    }
    printf("%d", cursor->payload);
    free (cursor->next);
    cursor -> next = NULL;
    return root;
}
Cell *erase (Cell *root) {
	while (root->next!= NULL)root=root->next;
        pop (*root);
	return root;
}
void printNode (Cell *root) {
	int i;
	int nodo;
	i=0;
	int value;
	Cell *cursor = root;
	printf("Elige un Nodo a imprimir");
	scanf("%d", &nodo);
	while ( i != nodo) {
		i = i + 1;
		cursor = (Cell*) cursor->next;
	}
	value=cursor->payload;
	printf("Su valor es: %d", value);
}
void eraseNode (Cell *root){
	int nodo;
	int i;
	i = 1;
	Cell *cursor = root;
	Cell *cursor2 = root->next;
	printf("Elige un Nodo a Eliminar");
	scanf ("%d", &nodo);
	if (nodo==1) {
			cursor = root->next;
			root = root->next;
	} else
	{
			while (i != nodo)
			{
				cursor2=cursor;
				cursor=cursor->next;
				i=i+1;
			}
			if (cursor->next != NULL)
			{
				cursor2->next=cursor->next;
			} else
			{
				cursor2->next=NULL;
			}
	}
}
Cell add (int n, Cell *root){
    Cell *aux;
    aux = (Cell*)malloc(sizeof(Cell));
    aux->payload=n;
    aux->next=NULL;
    Cell *cursor = root;
    while (cursor->next !=NULL){
        cursor = (Cell*)cursor->next;
        cursor->next = (void*)aux;
    }
    return *root;
}
void reemplazar (Cell *root) {
	int i;
	int nodo;
	i=1;
	int newvalue;
	Cell *cursor = root;
	printf("Elige el # de nodo a remplazar");
	scanf("%d", &nodo);
	while ( i != nodo) {
		i = i + 1;
		cursor = (Cell*) cursor->next;
	}
	printf("Elige un nuevo valor\n");
	scanf("%d", &newvalue);
	cursor->payload = newvalue;
}
int main (int argc, char* argv[]){
	Cell *root;
	root= (Cell*)malloc(sizeof(Cell));
	root->next=NULL;
	int op;
	int n;
	while(1) {
    	printf ("Elige una Opcion \n1.Agregar\n2.Imprimir Lista\n3.POP\n4.Imprimir Nodo\n5.Remplazar Nodo\n6.Borrar Nodo\n7.Eliminar Todo\n");
		scanf ("%d",&op);
        switch(op){
    case 1:
        printf ("Elige un NÃºmero");
        scanf ("%d",&n);
        add (n, root);
        system("cls");
        puts("Nodo Agregado\n");
        break;
    case 2:
        puts("\n");
        printList(root);
        break;
    case 3:
        pop(*root);
        break;
    case 4:
        printNode (root);
        puts("\n");
        break;
    case 5:
        system("cls");
        reemplazar (root);
         puts("\n");
        break;
    case 6:
        eraseNode (root);
        system("cls");
        puts("Nodo Eliminado\n");
        break;
    case 7:
        erase(root);
        return 0;
        }
	}
	return 0;
}
